get:
  tags:
    - "Task"
  operationId: "getTasksForUser"
  description: "Gets the tasks available to the user"
  parameters:
    - name: "userId"
      in: "query"
      description: "The id of the user to get tasks for (Default is the user logged in)"
      required: false
      schema:
        type: "integer"
        format: "int64"
  responses:
    "200":
      description: "Successfully fetched the list of tasks available"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "../schemas/admin/TaskResponse.yaml"
    "401":
      $ref: "../responses/UnauthorizedError.yaml"
post:
  tags:
    - "Task"
  operationId: "createNewTask"
  description: "Create a new task"
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../schemas/admin/TaskCreateRequest.yaml"
  responses:
    "200":
      description: "Successfully created the new task"
      content:
        application/json:
          schema:
            $ref: "../schemas/DefaultCreateResponse.yaml"
          examples:
            Success:
              value: {
                "id": 12345,
                "status": "Successfully created the new task"
              }
    "400":
      description: "Request contains invalid data. The task was not created"
      content:
        text/plain:
          schema:
            type: "string"
    "401":
      $ref: "../responses/UnauthorizedError.yaml"
    "403":
      $ref: "../responses/ForbiddenError.yaml"
put:
  tags:
    - "Task"
  operationId: "updateTask"
  description: "Updates an existing task"
  parameters:
    - name: "taskId"
      in: "query"
      description: "The id of the task to update"
      required: true
      schema:
        type: "integer"
        format: "int64"
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../schemas/admin/TaskUpdateRequest.yaml"
  responses:
    "200":
      description: "Successfully updated the task"
      content:
        application/json:
          schema:
            $ref: "../schemas/DefaultUpdateResponse.yaml"
          examples:
            Success:
              value: {
                "id": 12345,
                "status": "Successfully updated the task"
              }
    "400":
      description: "Request contains invalid data. The task was not updated"
      content:
        text/plain:
          schema:
            type: "string"
    "401":
      $ref: "../responses/UnauthorizedError.yaml"
    "403":
      $ref: "../responses/ForbiddenError.yaml"
    "404":
      description: "The specified task was not found"
      content:
        text/plain:
          schema:
            type: "string"